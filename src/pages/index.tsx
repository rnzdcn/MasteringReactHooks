import React, { ChangeEvent, Reducer } from 'react'
import Head from 'next/head'
import { Montserrat } from 'next/font/google'
import { z } from 'zod'
import { Switch } from '@headlessui/react'
import { ThemeContext } from '@/providers'

const montserrat = Montserrat({
  subsets: ['latin'],
  weight: ['400', '700'],
  preload: true,
})

type FORM_TYPE = {
  firstname: string | null
  lastname: string | null
  age: number | null
}

const Home = ({ posts }: any) => {
  let [count, setCount] = React.useState<number>(0)

  const context = React.useContext(ThemeContext)

  let ref = React.useRef<HTMLInputElement>(null)

  const [state, dispatch] = React.useReducer<
    Reducer<FORM_TYPE, { type: 'Handle Input text'; field: string; payload: string }>
  >(
    (prevState, action) => {
      switch (action.type) {
        case 'Handle Input text':
          return {
            ...prevState,
            [action.field]: action.payload,
          }
        default:
          return prevState
      }
    },
    {
      firstname: null,
      lastname: null,
      age: null,
    }
  )

  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {
    dispatch({
      type: 'Handle Input text',
      field: e.target.name,
      payload: e.target.value,
    })
  }

  const handleCount = (operator: string) => {
    if (operator === 'inc') {
      setCount((count += 1))
    } else {
      setCount((count -= 1))
    }
  }

  React.useEffect(() => {
    console.log('This log rendered every count state changed.')
  }, [count])

  const records = React.useMemo(
    () =>
      posts
        .map((post: any) => {
          return {
            title: post.title,
            body: post.body,
          }
        })
        .slice(0, 5),
    [posts]
  )

  //validation for useReducer using zod
  const form = z.object({
    firstname: z.string({ invalid_type_error: 'Firstname is required ' }),
    lastname: z.string({ invalid_type_error: 'Lastname is required ' }),
    age: z.number().positive(),
  })

  const result = form.safeParse({
    firstname: state.firstname,
    lastname: state.lastname,
    age: Number(state.age),
  })

  const handleOnSubmit = () => {
    if (!result.success) {
      result.error.errors.map(({ message }) => {
        alert(message)
        if (!ref.current) return
        ref.current.style.border = '1px solid red'
      })
    } else {
      alert('Success')
      return result.data
    }
  }

  return (
    <>
      <Head>
        <title>Practice React Hooks</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={montserrat.className}>
        <div className={'min-h-screen p-10'}>
          <div className={'border-b border-gray-200 pb-10'}>
            <h1 className={'text-2xl text-center pb-4'}>Use State Hook</h1>
            <div className={'flex justify-center items-center space-x-5'}>
              <button className={'border rounded-full p-4 cursor-pointer'} onClick={() => handleCount('inc')}>
                Increment
              </button>
              <h1 className={'text-7xl px-10'}>{count}</h1>
              <button
                className={`border rounded-full p-4 ${count === 0 ? 'cursor-not-allowed' : 'cursor-pointer'}`}
                onClick={() => handleCount('dec')}
                disabled={count === 0}
              >
                Decrement
              </button>
            </div>
          </div>

          <div className={'border-b border-gray-200 py-10'}>
            <h1 className={'text-2xl text-center pb-4'}>Use Effect Hook</h1>
            <div className={'flex justify-center items-center space-x-5'}>
              <h1 className={'text-3xl px-10'}>Check Console log</h1>
            </div>
          </div>

          <div className={'border-b border-gray-200 py-10'}>
            <h1 className={'text-2xl text-center pb-4'}>Use Memo Hook</h1>
            {records.map((record: any, i: number) => (
              <div key={i} className={'grid grid-cols-5 gap-4 my-2 p-4 border border-gray-200 rounded-xl items-center'}>
                <div className={'col-span-2'}>{record.title}</div>
                <div className={'col-span-3'}>{record.body}</div>
              </div>
            ))}
          </div>

          <div className={'border-b border-gray-200 py-10'}>
            <h1 className={'text-2xl text-center pb-4'}>Use Reducer Hook</h1>
            <div className={'flex justify-center items-center space-x-5'}>
              <div className={'lg:flex lg:justify-center flex-wrap w-full'}>
                <div className={'block p-4 '}>
                  <span className='text-gray-700'>Firstname</span>
                  <input
                    type='text'
                    name={'firstname'}
                    className='mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'
                    onChange={(e) => handleOnChange(e)}
                  />
                </div>

                <div className={'block p-4'}>
                  <span className='text-gray-700'>Lastname</span>
                  <input
                    type='text'
                    name={'lastname'}
                    className='mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'
                    onChange={(e) => handleOnChange(e)}
                  />
                </div>

                <div className={'block p-4'}>
                  <span className='text-gray-700'>Age</span>
                  <input
                    type='text'
                    name={'age'}
                    className='mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'
                    onChange={(e) => handleOnChange(e)}
                  />
                </div>
              </div>
            </div>

            <div className={'flex justify-center py-10'}>
              <button className={'border rounded-full py-4 px-10'} onClick={handleOnSubmit}>
                Submit
              </button>
            </div>

            <h1 className={'text-3xl pt-10 text-center'}>
              {`${state.firstname ?? ''} ${state.lastname ?? ''} ${state.age ?? ''}`}
            </h1>
          </div>

          <div className={`border-b border-gray-200 py-10 ${context.theme && 'bg-black'}`}>
            <h1 className={`text-2xl text-center pb-4 ${context.theme && 'text-white'}`}>Use Context Hook</h1>
            <div className={'flex justify-center items-center space-x-5'}>
              <Switch
                checked={context.theme}
                onChange={context.setTheme}
                className={`${
                  context.theme ? 'bg-white' : 'bg-black'
                } relative inline-flex h-6 w-11 items-center rounded-full`}
              >
                <span className='sr-only'>Enable notifications</span>
                <span
                  className={`${
                    context.theme ? 'translate-x-6 bg-black' : 'translate-x-1 bg-white'
                  } inline-block h-4 w-4 transform rounded-full transition`}
                />
              </Switch>
            </div>
          </div>
        </div>
      </main>
    </>
  )
}

export default Home

export async function getServerSideProps() {
  const posts = await (await fetch('https://jsonplaceholder.typicode.com/posts')).json()
  return {
    props: {
      posts,
    },
  }
}
